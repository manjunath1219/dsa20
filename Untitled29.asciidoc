+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-1

Given a binary tree, your task is to find subtree with maximum sum in tree.

Examples:

Input1 : Â  Â  Â  

       1

     / Â  \

   2Â  Â  Â  3

  / \Â  Â  / \

4 Â  5Â  6 Â  7

Output1 : 28

As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.

Input2 :

 Â  Â  Â  1

     /Â  Â  \

  -2Â  Â  Â  3

  / \Â  Â  /Â  \

4 Â  5Â  -6 Â  2

Output2 : 7

Subtree with largest sum is :

 -2

 / \

4 Â  5

Also, entire tree sum is also 7.

</aside>
----


+*In[1]:*+
[source, ipython3]
----
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxSubtreeSum(root):
    if root is None:
        return 0
    
    left_sum = maxSubtreeSum(root.left)
    right_sum = maxSubtreeSum(root.right)
    
    current_sum = root.val + left_sum + right_sum
    max_sum = max(current_sum, maxSubtreeSum.max_sum)
    
    maxSubtreeSum.max_sum = max_sum
    
    return current_sum

def maxSumSubtree(root):
    maxSubtreeSum.max_sum = float('-inf')
    maxSubtreeSum(root)
    
    return maxSubtreeSum.max_sum
# Example 1
root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(3)
root1.left.left = TreeNode(4)
root1.left.right = TreeNode(5)
root1.right.left = TreeNode(6)
root1.right.right = TreeNode(7)
result1 = maxSumSubtree(root1)
print(result1)  

# Example 2
root2 = TreeNode(1)
root2.left = TreeNode(-2)
root2.right = TreeNode(3)
root2.left.left = TreeNode(4)
root2.left.right = TreeNode(5)
root2.right.left = TreeNode(-6)
root2.right.right = TreeNode(2)
result2 = maxSumSubtree(root2)
print(result2)
----


+*Out[1]:*+
----
28
7
----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-2

Construct the BST (Binary Search Tree) from its given level order traversal.

Example:

Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output: BST:

            7

         /Â  Â  \

       4 Â  Â  12

     /Â  \ Â  Â  /

    3 Â  6Â  8

   / Â   / Â    \

 1Â    5  Â    10

</aside>
----


+*In[2]:*+
[source, ipython3]
----
from collections import deque

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def constructBST(arr):
    if not arr:
        return None
    
    queue = deque()
    queue.append(TreeNode(arr[0]))
    index = 1
    root = queue[0]
    
    while queue:
        node = queue.popleft()
        
        if index < len(arr):
            left_val = arr[index]
            if left_val != -1:
                node.left = TreeNode(left_val)
                queue.append(node.left)
            index += 1
        
        if index < len(arr):
            right_val = arr[index]
            if right_val != -1:
                node.right = TreeNode(right_val)
                queue.append(node.right)
            index += 1
    
    return root
arr = [7, 4, 12, 3, 6, 8, 1, 5, 10]
root = constructBST(arr)
----


+*In[3]:*+
[source, ipython3]
----
def inOrderTraversal(node):
    if node:
        inOrderTraversal(node.left)
        print(node.val, end=" ")
        inOrderTraversal(node.right)

inOrderTraversal(root)
----


+*Out[3]:*+
----
5 3 10 4 6 7 8 12 1 ----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-3

Given an array of size n. The problem is to check whether the given array can represent the level order traversal of a Binary Search Tree or not.

Examples:

Input1 : arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output1 : Yes

For the given arr[], the Binary Search Tree is:

            7

         /Â  Â  \

       4 Â  Â  12

     /Â  \ Â  Â  /

    3 Â  6Â  8

   / Â   / Â    \

 1Â    5  Â    10

Input2 : arr[] = {11, 6, 13, 5, 12, 10}

Output2 : No

The given arr[] does not represent the level order traversal of a BST.

</aside>
----


+*In[4]:*+
[source, ipython3]
----
def isValidLevelOrder(arr):
    if not arr:
        return True
    
    n = len(arr)
    left = 1
    right = 2
    
    for i in range(1, n):
        if arr[i] < arr[0]:
            return False
        
        if i < n - 1 and arr[i] >= arr[right]:
            left += 2
            right += 2
        
        if i >= n - 1 and arr[i] >= arr[right]:
            return False
    
    return True
arr1 = [7, 4, 12, 3, 6, 8, 1, 5, 10]
arr2 = [11, 6, 13, 5, 12, 10]

print(isValidLevelOrder(arr1))  
print(isValidLevelOrder(arr2))
----


+*Out[4]:*+
----
False
False
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
